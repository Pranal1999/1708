#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<stdbool.h>
int student[3][4]={0};
void *teacher();
void *student1();
void *student2();
void *student3();
pthread_mutex_t lck;
int ch1,ch2;
int r1,r2;

int main()
{	
printf("\t\t\t---Welcome---\n");
	pthread_mutex_init(&lck,NULL);\
student[1][1]=1;
	student[2][2]=2;student[3][3]=1;
	pthread_t t_thread;
	pthread_t s_thread;
printf("Resources Menu: \n\t\tPress '1' for pen\n\t\tPress '2' for paper \n\t\tPress '3' for   question_paper \n"); 	
	while(1)
{
if(student[1][4]==1 && student[2][4]==1 && student[3][4]==1){break;}
pthread_create(&t_thread, NULL, teacher, NULL);
pthread_join(t_thread,NULL);
	    
if((ch1==1 && ch2==2 || ch2==1 && ch1==2 ) && student[3][4]==0)
{
	pthread_create(&s_thread, NULL, student3, NULL);
	pthread_join(s_thread,NULL);
}
else if((ch1==1 && ch2==3 || ch2==1 && ch1==3 ) && student[2][4]==0)
{
pthread_create(&s_thread, NULL, student2, NULL);
	pthread_join(s_thread,NULL);
}
else if((ch1==2 && ch2==3 || ch2==2 && ch1==3 ) && student[1][4]==0)
{
	pthread_create(&s_thread, NULL, student1, NULL);
pthread_join(s_thread,NULL);
}
else
{
	printf("\n\tError (007): try again.. with different choices.\n");
}
}
printf("\n\t----Done---\n");
}


void *teacher()
{
pthread_mutex_lock(&lck);
	printf("\nFirst Resource on shared tabel:-\t");
	scanf("%d",&ch1);
	printf("Second Resource on shared tabel:-\t");
	scanf("%d",&ch2);
	pthread_mutex_unlock(&lck);
}

void *student2()
{	
	pthread_mutex_lock(&lck);
	printf("\nChoices Made = 'pen', 'question_paper'\n");
	student[2][4]=1;
	printf("\n\tStudent 2 has Completed the assignment. \n");
	pthread_mutex_unlock(&lck);
}

void *student3()
{	
	pthread_mutex_lock(&lck);
	printf("\nChoices Made = 'pen', 'paper'\n");
	student[3][4]=1;
	printf("\n\tStudent 3 has Completed the assignment.\n");
	pthread_mutex_unlock(&lck);
}

void *student1()
{	
	pthread_mutex_lock(&lck);
	printf("\nChoices Made = 'paper', 'question_paper'\n");
	student[1][4]=1;
	printf("\n\tStudent 1 has Completed the assignment.\n");	
	pthread_mutex_unlock(&lck);
}






    scanf("%d",&at[i]);
    printf("Enter the burst times in order :\n");
    for(int i=0;i<No;i++)
    scanf("%d",&bt[i]);
}

 void Init()
{
    total=0;
    twt=0;
    ttat=0;
    for(int i=0; i<No; i++)
    {
        rt[i]=bt[i];
        finish[i]=0;
        wt[i]=0;
        tat[i]=0;
        total+=bt[i];
     }
}


int getNextProcess(int time)
{ 
     int i,low;
     for(i=0;i<No;i++)
     {      if(finish[i]==0)   {    low=i; break;  }   }
      

for(i=0;i<No;i++)
      	{
            	if(finish[i]!=1)
            	{ if(rt[i]<rt[low] && at[i]<=time)   {  low=i; }   }
}
        	return low;
 }

void dispTime()
{
    for(int i=0;i<No;i++)
    {
        twt+=wt[i];
        tat[i]=wt[i]+bt[i];
        ttat+=tat[i];
        printf("waiting time for P%d == %d, Turnaround time= %d \n",i+1,wt[i],tat[i]);
    }
    printf("Avg Waiting time = %f and Avg Turnaround time =  		%f\n",(double)twt/No,(double)ttat/No);
    printf("\n\t\t\t--Scheduling complete--\n");
}


void computeSRT()
{
    readData();
    Init();
    int time,next=0,old,i,new_time;
    printf("Gantt Chart\n ");
    for(time=0;time<total;time++)
    {
        old=next;
        next=getNextProcess(time);
        if((old!=next &&tq==0 ) ||time==0)
        {		printf("(t=%d)|----p%d----|",time,next+1);        }
        rt[next]=rt[next]-1;
        if(rt[next]==0) 
        {   finish[next]=1;  }
        for(i=0;i<No;i++)
        {
            if(i!=next && finish[i]==0 && at[i]<=time)
            {                wt[i]++;}
         }
  	if(time!=0&&old==next&&time%10==0){next=getNextProcess(time);printf("(t=%d)|----			p%d----|",time,next+1);}
    }
    printf("( %d ) \n",total);
    for(i=0;i<No;i++)
    {    if(!finish[i]) 
        {
            printf("Scheduling failed, cannot continue \n "); 
            return;
        }
    dispTime();
     }
}
int main()
{

    printf("\t<-------------------------Welcome------------------------->\t\n");
    printf("....(--please Extend your command prompt to appropriate size for Gantt chart--).....\n");
    void readData();
    void computeSRT();
    void Init();
    void dispTime();
    int getNextProcess(int);
    computeSRT(); 
    printf("\t<-------------------------------Rights reserved to Shubham>\t\n");
                 
}

